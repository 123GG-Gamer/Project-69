	// ==UserScript==
	// @name       üéÖChristmas Mod :3üéÖ
	// @namespace    -
	// @version    1
	// @description üéÖChristmas Mod :3üéÖ
	// @author       Tha Best Man Alive „ÉÑ#9257
	// @match        *://sandbox.moomoo.io/*
	// @match        *://moomoo.io/*
	// @grant        none
	// @require https://greasyfork.org/scripts/368273-msgpack/code/msgpack.js?version=598723
	// @require http://code.jquery.com/jquery-3.3.1.min.js
	// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
	// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
	// @require https://cdn.jsdelivr.net/gh/emn178/js-sha3/build/sha3.min.js

	// ==/UserScript==

let hue = 0;

let replaceInterval = setInterval(() => {
if (CanvasRenderingContext2D.prototype.roundRect) {
  CanvasRenderingContext2D.prototype.roundRect = ((oldFunc) => function() { if (this.fillStyle == "#8ecc51") this.fillStyle = `hsl(${hue}, 100%, 50%)`; return oldFunc.call(this, ...arguments); })(CanvasRenderingContext2D.prototype.roundRect);
  clearInterval(replaceInterval);
}}, 10);

function changeHue() {
  hue += Math.random() * 3;
}

setInterval(changeHue, 10);

document.getElementById("storeHolder").style = "height: 2200px; width: 450px;"
document.getElementById("allianceHolder").style = "height: 2200px; width: 450px;"
document.getElementById("leaderboard").style.color = "red";
document.getElementById("gameName").style.color = "red";
document.getElementById("setupCard").style.color = "silver";
document.getElementById("nameInput").style.color = "green"
document.getElementById("woodDisplay").style.color = "red";
document.getElementById("foodDisplay").style.color = "silver";
document.getElementById("stoneDisplay").style.color = "green";
document.getElementById("scoreDisplay").style.color = "red";
document.getElementById("pingDisplay").style.color = "silver";
document.getElementById("killCounter").style.color = "green";
document.getElementById("ageText").style.color = "silver";
document.getElementById("allianceButton").style.color = "green";
document.getElementById("chatButton").style.color = "red";
document.getElementById("storeButton").style.color = "silver";
document.getElementById('enterGame').innerHTML = 'ü•≥Merryü•≥ <br> ü•≥Christmasü•≥ <br> ü•≥Everyoneü•≥!';
document.getElementById('chatBox').placeholder = "üéÅWhat Your PresentsüéÅ...";
document.getElementById('gameName').innerHTML = 'üéÖChristmas Mod :3üéÖ';
document.getElementById('diedText').style.color = "red"
document.getElementById('diedText').innerHTML = 'üò≠Dont Cryüò≠ <br> üéÖits christmas!üéÖ';
document.getElementById('nameInput').placeholder = "Merry :3";



	let mouseX;
	let mouseY;

	let width;
	let height;


	setInterval(() => {
		 if (eae == 1) {
			  doNewSend(["13c", [0, 11, 0]]);
			  doNewSend(["13c", [0, 21, 1]]);
			  setTimeout(() => {
					doNewSend(["13c", [0, 7, 0]]);
					doNewSend(["13c", [0, 21, 1]]);
			  }, 350);
			  setTimeout(() => {
					doNewSend(["13c", [0, 26, 0]]);
					doNewSend(["13c", [0, 21, 1]]);
			  }, 350);
			  setTimeout(() => {
					doNewSend(["13c", [0, 21, 0]]);
					doNewSend(["13c", [0, 21, 1]]);
			  }, 350);
			  setTimeout(() => {
					doNewSend(["13c", [0, 53, 0]]);
					doNewSend(["13c", [0, 21, 1]]);
			  }, 250);
		 }
	}, 450);
	setInterval(() => {
		 if (aea == 1) {
			  doNewSend(["13c", [0, 13, 1]]);
			  setTimeout(() => {
					doNewSend(["13c", [0, 19, 1]]);
			  }, 20);
			  setTimeout(() => {
					doNewSend(["13c", [0, 21, 1]]);
			  }, 20);
			  setTimeout(() => {
					doNewSend(["13c", [0, 18, 1]]);
			  }, 20);
		 }
	}, 10);
	setInterval(() => {
		if(clanToggle == 1) {
			  doNewSend(["9", [null]]);
			  doNewSend(["8", [animate(false, 5)]])
		 }
		 doNewSend(["testing", [6]]);
	}, 200);

	setInterval(() => {
		 if(messageToggle == 1) {
			  doNewSend(["ch", [animate(true, 5)]])
		 }
	}, 200);

	setInterval(() => {
		 if(crash == 1) {
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
        doNewSend(["5", ["constructor", true]]);
		 }
	}, 50);

	setInterval(() => {
		 if(autoaim == true) {
			  doNewSend(["2", [nearestEnemyAngle]]);
		 }
	}, 0);

	setInterval(() => {
		 if(autoprimary == true) {
			  doNewSend(["5", [primary, true]]);
		 }
	}, 0);

	setInterval(() => {
		 if(autosecondary == true) {
			  doNewSend(["5", [secondary, true]]);
		 }
	}, 0);

	setInterval(() => {
		 if(click == true) {
		 doNewSend(["c", [1, null]]);
		 doNewSend(["c", [0, null]]);
		 }
	}, 10);

	setInterval(() => {
		 if (qh == 1) {
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
		 }
	}, 15);

	setInterval(() => {
		 if(hatToggle == 1) {
			  if(oldHat != normalHat) {
					hat(normalHat);
					console.log("Tried. - Hat")
			  }
			  if(oldAcc != normalAcc) {
					acc(normalAcc);
					console.log("Tried. - Acc")
			  }
			  oldHat = normalHat;
			  oldAcc = normalAcc
		 }
	}, 25);
   setInterval(()=>{
       if(Madmode==1){
           doNewSend(["ch", ["HI >:("]]);
			  doNewSend(["c", [1]]);
           doNewSend(["33", [nearestEnemyAngle]]);
           setTimeout(()=>{
               if(Madmode==1){
                   doNewSend(["ch", ["I MAD ME KILL YOU >:("]]);
                   setTimeout(()=>{
                       if(Madmode==1){
                            doNewSend(["ch", ["IM NOT FREINDLY ME KILL YOU"]]);
                           setTimeout(()=>{
                               if(Madmode==1){
                                   doNewSend(["ch", ["YOU BETTER RUN >:("]]);
                               }
                           },700);
                       }
                   },700);
               }
           },700);
       }
   },700);
   setInterval(()=>{
       if(FwendMod==1){
           doNewSend(["ch", ["HI :)"]]);
           doNewSend(["33", [nearestEnemyAngle]]);
           setTimeout(()=>{
               if(FwendMod==1){
                   doNewSend(["ch", ["ME BOT ME FOLLOW YOU :)"]]);
                   setTimeout(()=>{
                       if(FwendMod==1){
                            doNewSend(["ch", ["ME FWENDLY ME NO KILL :)"]]);
                           setTimeout(()=>{
                               if(FwendMod==1){
                                   doNewSend(["ch", ["ME MADE IN 2020 :3"]]);
                               }
                           },700);
                       }
                   },700);
               }
           },700);
       }
   },700);
   setInterval(()=>{
       if(FwendMod==1){
           storeEquip(36);
           setTimeout(()=>{
               if(FwendMod==1){
                   storeEquip(36);
                   setTimeout(()=>{
                       if(FwendMod==1){
                            storeEquip(36);
                           setTimeout(()=>{
                               if(FwendMod==1){
                                   storeEquip(36);
                               }
                           },100);
                       }
                   },100);
               }
           },100);
       }
   },240);
   setInterval(()=>{
       if(AFK == 1){
           doNewSend(["ch", ["-AFK-"]]);
           setTimeout(()=>{
               if(AFK==1){
                   doNewSend(["ch", ["-|AFK|-"]]);
                   setTimeout(()=>{
                       if(AFK==1){
                            doNewSend(["ch", ["-_-|AFK|-_-"]]);
                           setTimeout(()=>{
                               if(AFK==1){
                                   doNewSend(["ch", ["O;::;O-AFK-O;::;O"]]);
                               }
                           },1000);
                       }
                   },1000);
               }
           },1000);
       }
   },4000);

	function normal() {
		 hat(normalHat);
		 acc(normalAcc);
	}

	function aim(x, y){
		  var cvs = document.getElementById("gameCanvas");
		  cvs.dispatchEvent(new MouseEvent("mousemove", {
				clientX: x,
				clientY: y

		  }));
	}
	var CPS = true;
	var CPSSpeed = 10;
	function COU(Item) {
		 if (CPS == true) {
	for(var i=0;i<CPSSpeed;i++){
			  place(Item)
	}
		 }
	}

	let coreURL = new URL(window.location.href);
	window.sessionStorage.force = coreURL.searchParams.get("fc");

	var antibull = false;
	var AIH = true;
	var click = false;
   var op = true;
   var antiBoostSpike;
	var nearestEnemy;
	var nearestEnemyAngle;
	var isEnemyNear;
   var instaSpeed = 185;
	var primary;
	var secondary;
	var foodType;
	var wallType;
	var spikeType;
	var millType;
	var mineType;
	var boostType;
	var turretType;
	var spawnpadType;
	var autoaim = false;
	var autoprimary = false;
	var autosecondary = false;
	var tick = 1;
	var oldHat;
	var oldAcc;
	var enemiesNear;
	var normalHat;
	var normalAcc;
	var ws;
	var msgpack5 = msgpack;
	var boostDir;
	let myPlayer = {
		 id: null,
		 x: null,
		 y: null,
		 dir: null,
		 object: null,
		 weapon: null,
		 clan: null,
		 isLeader: null,
		 hat: null,
		 accessory: null,
		 isSkull: null
	};

	let healSpeed = 60;
	var messageToggle = 0;
   var FwendMod = 0;
	var um = 0;
   var crash = 0;
	var Madmode = 0;
	var aea = 0;
	var eae = 0;
   var qh = 0;
   var op = 1;
   var Reload = 0;
	var clanToggle = 0;
   var antiinsta = 1;
	let healToggle = 1;
	var AutoPlague = 0;
	let hatToggle = 1;
	let clickinsta = 1;
   let crashing;
   let closed;
   var AFK = 0;
   var PREFIX = "l";




	document.msgpack = msgpack;
	function n(){
		  this.buffer = new Uint8Array([0]);
		  this.buffer.__proto__ = new Uint8Array;
		  this.type = 0;
	}

	const CanvasAPI = document.getElementById("gameCanvas")
	CanvasAPI.addEventListener("mousedown", buttonPressD, false);

	function buttonPressD(e) {
		 if (e.button == 0) {

	  }
		 if (e.button == 1) {
			  doNewSend(["ch", ["                        "]]);
		 }
		 if (e.button == 2 && AutoPlague == 1) {
			  doNewSend(["ch", ["plague mask :P"]]);
					doNewSend(["13c", [1, 21, 0]]);
					doNewSend(["13c", [0, 21, 0]]);
					doNewSend(["13c", [0, 0, 1]]);
					doNewSend(["13c", [1, 21, 1]]);
					doNewSend(["13c", [0, 21, 1]]);
					doNewSend(["7", [1]]);
			  setTimeout( () => {
					doNewSend(["13c", [0, 0, 0]]);
					doNewSend(["13c", [0, 6, 0]]);
					doNewSend(["13c", [0, 21, 1]]);
			  }, 120);
			  setTimeout( () => {
					doNewSend(["7", [1]]);
			  }, 200);
		 }
	}


	WebSocket.prototype.oldSend = WebSocket.prototype.send;
	WebSocket.prototype.send = function(m){
		 if (!ws){
			  document.ws = this;

			  ws = this;
			  socketFound(this);
		 }
		 this.oldSend(m);
	};


	function socketFound(socket){
		 socket.addEventListener('message', function(message){
			  handleMessage(message);
		 });
	}

	function handleMessage(m){
		 let temp = msgpack5.decode(new Uint8Array(m.data));
		 let data;
		 if(temp.length > 1) {
			  data = [temp[0], ...temp[1]];
			  if (data[1] instanceof Array){
					data = data;
			  }
		 } else {
			data = temp;
		 }
		 let item = data[0];
		 if(!data) {return};

       if(antiBoostSpike && lastX[playerInfo[0]] != undefined && lastY[playerInfo[0]] != undefined && distance(playerInfo[1], playerInfo[2]) - distance(lastX[playerInfo[0]], lastY[playerInfo[0]]) < maxSpeed){
				place(spikeType, Math.atan2(playerInfo[2] - myPlayer.y, playerInfo[1] - myPlayer.x) + toRad(90));
				place(spikeType, Math.atan2(playerInfo[2] - myPlayer.y, playerInfo[1] - myPlayer.x) - toRad(90));
            doNewSend(["ch", ["nope your not boosting."]]);
			}
		 if(item === "io-init") {
					let cvs = document.getElementById("gameCanvas");
					width = cvs.clientWidth;
					height = cvs.clientHeight;
					$(window).resize(function() {
						 width = cvs.clientWidth;
						 height = cvs.clientHeight;
					});
					cvs.addEventListener("mousemove", e => {
						 mouseX = e.clientX;
						 mouseY = e.clientY;
					});
			  }

		 if (item == "1" && myPlayer.id == null){
			  myPlayer.id = data[1];
		 }

		 if (item == "33") {
			  enemiesNear = [];
			  for(let i = 0; i < data[1].length / 13; i++) {
					let playerInfo = data[1].slice(13*i, 13*i+13);
					if(playerInfo[0] == myPlayer.id) {
						 myPlayer.x = playerInfo[1];
						 myPlayer.y = playerInfo[2];
						 myPlayer.dir = playerInfo[3];
						 myPlayer.object = playerInfo[4];
						 myPlayer.weapon = playerInfo[5];
						 myPlayer.clan = playerInfo[7];
						 myPlayer.isLeader = playerInfo[8];
						 myPlayer.hat = playerInfo[9];
						 myPlayer.accessory = playerInfo[10];
						 myPlayer.isSkull = playerInfo[11];
					} else if(playerInfo[7] != myPlayer.clan || playerInfo[7] === null) {
						 enemiesNear.push(playerInfo);
					}
			  }
		 }
						 let Object = {x: null, y: null, dir: null, id: null, sid: null, type: null};
		 if(item == "6" && nearestEnemy){
			  for(let i = 0; i < data[1].length / 8; i++){
					let ObjectData = data[1].slice(8*i, 8*i+8);
					if(ObjectData[6] == 15 && ObjectData[7] != myPlayer.id){
						 if(Math.sqrt(Math.pow((myPlayer.y-ObjectData[2]), 2) + Math.pow((myPlayer.x-ObjectData[1]), 2)) < 120){
							  for(let i=0;i<36;i++){
									let angle = myPlayer.dir + toRad(i * 10);
									place(spikeType, angle)
									doNewSend(["ch", ["Auto | Anti-Trap"]]);
							  }
							  setTimeout(()=>{
									doNewSend(["13c", [1, 6, 0]]);
									doNewSend(["13c", [0, 6, 0]]);
									doNewSend(["13c", [0, 0, 1]]);
									doNewSend(["13c", [1, 21, 1]]);
									doNewSend(["13c", [0, 21, 1]]);
							  },100);
						 }
					}
			  }
		 }
		 isEnemyNear = false;
		 if(enemiesNear) {
			  nearestEnemy = enemiesNear.sort((a,b) => dist(a, myPlayer) - dist(b, myPlayer))[0];
		 }

		 if(nearestEnemy) {
			  nearestEnemyAngle = Math.atan2(nearestEnemy[2]-myPlayer.y, nearestEnemy[1]-myPlayer.x);
			  if(Math.sqrt(Math.pow((myPlayer.y-nearestEnemy[2]), 2) + Math.pow((myPlayer.x-nearestEnemy[1]), 2)) < 0) {
					isEnemyNear = true;
					if(autoaim == false && myPlayer.hat != 7 && myPlayer.hat != 53) {
						 normalHat = 6;
						 if(primary != 8) {
							  normalAcc = 19
						 }
					};
			  }
		 }
		 if(isEnemyNear == false && autoaim == false) {
			  normalAcc = 11;
			  if (myPlayer.y < 2400){
					normalHat = 15;
			  } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
					normalHat = 31;
			  } else {
				  normalHat = 12;
			  }
		 }
		 if (!nearestEnemy) {
			  nearestEnemyAngle = myPlayer.dir;
		 }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"ol") {
        setTimeout(() => {
            doNewSend(["ch", ["crash funny too :V"]]);
            crashing = true;
        },500);
    }
    if (crashing && !closed) {
        for (let e = 0; e < 1000; e++) {
            let result = new Uint8Array(Math.round(Math.random() * 18));for (let i = 0; i < result.length; i++) {if (i == 0) {result[i] = Math.round(Math.random() * 256);} else {if (i == 1) {result[i] = Math.round(Math.random() * 256);} else {if (i == 2) {result[i] = Math.round(Math.random() * 128);} else {if (i == 3) {result[i] = Math.round(Math.random() * 85);} else {if (i == 4) {result[i] = Math.round(Math.random() * 64);} else {if (i == 5) {result[i] = Math.round(Math.random() * 51);} else {if (i == 6) {result[i] = Math.round(Math.random() * 42);} else {if (i == 7) {result[i] = Math.round(Math.random() * 36);} else {if (i == 8) {result[i] = Math.round(Math.random() * 32);} else {if (i == 9) {result[i] = Math.round(Math.random() * 28);} else {if (i == 10) {result[i] = Math.round(Math.random() * 25);} else {if (i == 11) {result[i] = Math.round(Math.random() * 23);} else {if (i == 12) {result[i] = Math.round(Math.random() * 21);} else {if (i == 13) {result[i] = Math.round(Math.random() * 19);} else {if (i == 14) {result[i] = Math.round(Math.random() * 18);} else {if (i == 15) {result[i] = Math.round(Math.random() * 17);} else {if (i == 16) {result[i] = Math.round(Math.random() * 16);} else {if (i == 17) {result[i] = Math.round(Math.random() * 15);}}}}}}}}}}}}}}}}}}}ws.oldSend(result);
        }
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"km") {
            doNewSend(["6", [4]]);
            doNewSend(["6", [15]]);
        setTimeout(() => {
            doNewSend(["ch", ["Katana+Musket Selected"]]);

        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"mill+spike") {
            doNewSend(["6", [28]]);
            doNewSend(["6", [25]]);
        setTimeout(() => {
            doNewSend(["ch", ["Mill+Spike Selected"]]);

        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"crossbow+spike") {
            doNewSend(["6", [12]]);
            doNewSend(["6", [25]]);
        setTimeout(() => {
            doNewSend(["ch", ["Crossbow+Spike Selected"]]);

        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"k+spike") {
            doNewSend(["6", [4]]);
            doNewSend(["6", [25]]);
        setTimeout(() => {
            doNewSend(["ch", ["Katana+Spike Selected"]]);

        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"axe+rep") {
            doNewSend(["6", [2]]);
            doNewSend(["6", [13]]);
        setTimeout(() => {
            doNewSend(["ch", ["Axe+Repeater Selected"]]);

        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"katana+rep") {
            doNewSend(["6", [4]]);
            doNewSend(["6", [13]]);
        setTimeout(() => {
            doNewSend(["ch", ["Katana+Repeater Selected"]]);

        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"axe") {
            doNewSend(["6", [2]]);
        setTimeout(() => {
            doNewSend(["ch", ["Axe Selected"]]);
        },500);
    }
   if (data[0] == "ch" && data[1] == myPlayer.id && data[2].split(' ')[0] == PREFIX+"katana") {
            doNewSend(["6", [4]]);
        setTimeout(() => {
            doNewSend(["ch", ["Katana Selected"]]);

        },500);
    }
    if(item == "h" && data[1] == myPlayer.id) {
       if(data[2] < 100 && data[2] > 0 && healToggle == 1) {
           setTimeout( () => {
               if (um == 0){
               doNewSend(["ch", [""]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);
					doNewSend(['5', [foodType, null]]);
					doNewSend(['c', [1]]);
					doNewSend(['c', [0]]);
					doNewSend(['5', [null]]);               }
           }, 60);
       }
        if (data[2] < 76 && data[2] > 0 && antiinsta == 1){
            doNewSend(["13c", [0, 21, 1]]);
            doNewSend(["13c", [0, 6, 0]]);
        }
        if (data[2] < 58 && data[2] > 0 && antiinsta == 1 && um == 0){
            doNewSend(["ch",[""]]);
            um = 1;
            place(foodType, true);
            place(foodType, true);
            setTimeout( () => {
                place(foodType, null);
                place(foodType, null);
                for (let i=0;i<5;i++){
                    setTimeout( () => {
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                        place(foodType, null);
                    }, healSpeed);
                }
                um = 0;
            }, healSpeed*3);
        }
   }

   update();
}

	function doNewSend(sender){
		 ws.send(new Uint8Array(Array.from(msgpack5.encode(sender))));
	}
   setInterval(() => {
       if(op == true && nearestEnemy) {
           doNewSend(["ch", [""]]);
       }},500)
	setInterval(() => {
		 if(myPlayer.hat == 45){
			  doNewSend(["ch", [""]]);
		 }},50)

	function acc(id) {
		 doNewSend(["13c", [0, 0, 1]]);
		 doNewSend(["13c", [0, id, 1]]);
	}

	function hat(id) {
		 doNewSend(["13c", [0, id, 0]]);
	}


	function place(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
		 doNewSend(["5", [id, null]]);
		 doNewSend(["c", [1, angle]]);
		 doNewSend(["c", [0, angle]]);
		 doNewSend(["5", [myPlayer.weapon, true]]);
	}

	function placeQ(id, angle = Math.atan2(mouseY - height / 2, mouseX - width / 2)) {
		 doNewSend(["5", [id, null]]);
		 doNewSend(["c", [1, boostDir]]);
		 doNewSend(["c", [0, boostDir]]);
		 doNewSend(["5", [myPlayer.weapon, true]]);
		 doNewSend(["2", [nearestEnemyAngle]]);
	}

	function boostSpike() {
		 if(boostDir == null) {
			  boostDir = nearestEnemyAngle;
		 }
		 place(spikeType, boostDir - toRad(90));
		 place(spikeType, boostDir + toRad(90));
		 place(boostType, boostDir);
		 doNewSend(["33", [boostDir]]);
	}

	var repeater = function(key, action, interval) {
		 let _isKeyDown = false;
		 let _intervalId = undefined;

		 return {
			  start(keycode) {
					if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
						 _isKeyDown = true;
						 if(_intervalId === undefined) {
							  _intervalId = setInterval(() => {
									action();
									if(!_isKeyDown){
										 clearInterval(_intervalId);
										 _intervalId = undefined;
										 console.log("claered");
									}
							  }, interval);
						 }
					}
			  },

			  stop(keycode) {
					if(keycode == key && document.activeElement.id.toLowerCase() !== 'chatbox') {
						 _isKeyDown = false;
					}
			  }
		 };


	}


	const healer1 = repeater(01, () => {placeQ(foodType, boostDir);
													placeQ(foodType, boostDir);
													placeQ(foodType, boostDir)}, 50);
	const healer2 = repeater(02, () => {placeQ(foodType, boostDir);
													placeQ(foodType, boostDir);
													placeQ(foodType, boostDir)}, 50);
	const boostPlacer = repeater(70, () => {place(boostType)}, 0);
	const spikePlacer = repeater(86, () => {place(spikeType)}, 0);
	const millPlacer = repeater(78, () => {place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(90));
														place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(280));
														place(millType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(0));
														}, 0);
	const turretPlacer = repeater(72, () => {place(turretype, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(90));
														place(turretType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(280));
														place(turretType, Math.atan2(mouseY - height / 2, mouseX - width / 2) + toRad(0));
														}, 0);
	const boostSpiker = repeater(71, () => {boostSpike}, 0);

	document.addEventListener('keydown', (e)=>{
		 spikePlacer.start(e.keyCode);
		 healer1.start(e.keyCode);
		 healer2.start(e.keyCode);
		 boostPlacer.start(e.keyCode);
		 millPlacer.start(e.keyCode);
		 turretPlacer.start(e.keyCode);

		 if (e.keyCode == 67 && document.activeElement.id.toLowerCase() !== 'chatbox') {
           doNewSend(["ch", ["Hat | Soldier"]]);
			  doNewSend(["13c", [1, 6, 0]]);
			  doNewSend(["13c", [0, 6, 0]]);
			  doNewSend(["13c", [0, 0, 1]]);
			  doNewSend(["13c", [1, 21, 1]]);
			  doNewSend(["13c", [0, 21, 1]]);
		 }
       if(e.keyCode == 16 && document.activeElement.id.toLowerCase() !== 'chatbox') {
           doNewSend(["5"]);
           doNewSend(["13c", [0, 40, 0]]);
           place(boostType)
           doNewSend(["c", [1]]);
         setTimeout( () => {
            doNewSend(["13c", [0, 6, 0]]);
            doNewSend(["13c", [0, 12, 0]]);
        }, 110);
         setTimeout( () => {
             doNewSend(["c", [0, null]]);
         }, 200);
     }
		 if (e.keyCode == 76 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  autoaim = true
			  last = myPlayer.hat
			  lastt = myPlayer.accessory
			  doNewSend(["5", [secondary, true]]);
			  doNewSend(["c", [1]]);
			  doNewSend(["2", [nearestEnemyAngle]]);
			  doNewSend(["ch", [spam(true, 5)]])
			  doNewSend(["13c", [0, 53, 0]]);
			  doNewSend(["13c", [0, 19, 1]]);
			  setTimeout(() => {
					doNewSend(["6", [12]]);
					doNewSend(["2", [nearestEnemyAngle]]);
			  },100);
			  setTimeout(() => {
					doNewSend(["6", [15]]);
					doNewSend(["2", [nearestEnemyAngle]]);
			  },200);
			  setTimeout(() => {
					doNewSend(["c", [null]]);
					doNewSend(["5", [primary, true]]);
					hat(last)
					acc(lastt)
					autoaim = false
			  },300);
			  setTimeout(() => {
					doNewSend(["2", [myPlayer.dir]]);
			  },310);
		 }

     if(e.keyCode == 71 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        autoaim = true;
        doNewSend(["5", [primary, true]]);
        doNewSend(["ch", [""]]);
        doNewSend(["13c", [0, 7, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [0, 19, 1]]);
        place(spikeType);
        doNewSend(["c", [1]]);

        setTimeout( () => {
            doNewSend(["13c", [0, 53, 0]]);
        }, 100);

        setTimeout( () => {
            doNewSend(["c", [0, null]]);
            doNewSend(["13c", [0, 6, 0]]);
            autoaim = false;
        }, 200);
    }
		 if (e.keyCode == 74 && document.activeElement.id.toLowerCase() !== 'chatbox') {
           doNewSend(["ch", ["Hat | Bull Helmet"]]);
			  doNewSend(["13c", [1, 7, 0]]);
			  doNewSend(["13c", [0, 7, 0]]);
           doNewSend(["13c", [0, 0, 1]]);
			  doNewSend(["13c", [1, 21, 1]]);
			  doNewSend(["13c", [0, 21, 1]]);
		 }

		if (e.keyCode == 75 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			 place(spawnpadType, myPlayer.dir + toRad(45));
			 place(spawnpadType, myPlayer.dir - toRad(45));
		}
		if (e.keyCode == 72 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			 place(turretType, myPlayer.dir + toRad(45));
			 place(turretType, myPlayer.dir - toRad(45));
		}
		 if (e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  click = true;
			  doNewSend(["13c", [1, 40, 0]]);
			  doNewSend(["13c", [0, 40, 0]]);
			  doNewSend(["13c", [1, 21, 1]]);
			  doNewSend(["13c", [0, 21, 1]]);
		 }
		 if (e.keyCode == 192 && document.activeElement.id.toLowerCase() !== 'chatbox') {
		 doNewSend(["ch", ["Invisible Weapon!"]]);
		 doNewSend(['5', ['length', !0]]);
		 doNewSend(["8", [""]]);
		 }
		 if (e.keyCode == 9 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  doNewSend(["13c", [1, 11, 1]]);
			  doNewSend(["13c", [0, 11, 1]]);
			  doNewSend(["13c", [1, 12, 0]]);
			  doNewSend(["13c", [0, 12, 0]]);
			  doNewSend(["13c", [1, 31, 0]]);
			  doNewSend(["13c", [1, 15, 0]]);
		 }

		 if(e.keyCode == 106 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  healToggle = (healToggle + 1) % 2;
		 }
		 if(e.keyCode == 105 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  FwendMod = (FwendMod + 1) % 2;
					if(FwendMod == 0) {
						 doNewSend(["ch", ["fwend mode off"]]);
					} else {
						 doNewSend(["ch", ["fwend mode on"]]);
					}
		 }
		 if(e.keyCode == 104 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  Madmode = (Madmode + 1) % 2;
					if(Madmode == 0) {
						 doNewSend(["ch", ["Madmode off"]]);
					} else {
						 doNewSend(["ch", ["Madmode on"]]);
					}
		 }
		 if(e.keyCode == 103 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  aea = (aea + 1) % 2;
					if(aea == 0) {
						 doNewSend(["ch", ["wing change is off"]]);
					} else {
						 doNewSend(["ch", ["wing change is on"]]);
					}
		 }
		 if(e.keyCode == 81 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  qh = (qh + 1) % 2;
					if(qh == 0) {
						 doNewSend(["ch", [""]]);
					} else {
						 doNewSend(["ch", [""]]);
					}
		 }
		 if(e.keyCode == 102 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  eae = (eae + 1) % 2;
					if(eae == 0) {
						 doNewSend(["ch", ["hat change is off"]]);
					} else {
						 doNewSend(["ch", ["hat change is on"]]);
					}
		 }
    if(e.keyCode == 101 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  AFK = (AFK + 1) % 2;
					if(AFK == 0) {
            doNewSend(["ch", ["afk mode is off"]]);
        } else {
            doNewSend(["ch", ["afk mode is on"]]);
        }
    }
		 if(e.keyCode == 40 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  doNewSend(["6", [5]]);
			  doNewSend(["6", [17]]);
			  doNewSend(["6", [31]]);
			  doNewSend(["6", [23]]);
			  doNewSend(["6", [9]]);
			  doNewSend(["6", [38]]);
			  doNewSend(["6", [4]]);
			  doNewSend(["6", [25]]);
		 }
		 if (e.keyCode == 9 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  if (myPlayer.y < 2400){
					doNewSend(["13c", [0, 15, 0]]);
			  } else if (myPlayer.y > 6850 && myPlayer.y < 7550){
					doNewSend(["13c", [0, 31, 0]]);
			  } else {
				  doNewSend(["13c", [0, 12, 0]]);
			  }
			  doNewSend(["13c", [0, 11, 1]]);
		 }
		 if(e.keyCode == 82 && document.activeElement.id.toLowerCase() !== 'chatbox') {
					autoprimary = true;
					autosecondary = false;
					autoaim = true;
					autoprimary = true;
					autosecondary = false;
               doNewSend(["ch", [""]]);
					doNewSend(["13c", [0, 0, 1]]);
					doNewSend(["5", [primary, true]]);
					doNewSend(["7", [1]]);
					doNewSend(["13c", [1, 7, 0]]);
					doNewSend(["13c", [0, 7, 0]]);
					doNewSend(["13c", [1, 21, 1]]);
					doNewSend(["13c", [0, 21, 1]]);
			  setTimeout( () => {
					autoprimary = false;
					autosecondary = true;
					doNewSend(["13c", [0, 0, 0]]);
					doNewSend(["13c", [1, 53, 0]]);
					doNewSend(["13c", [0, 53, 0]]);
					doNewSend(["5", [secondary, true]]);
			  }, 115);
			  setTimeout( () => {
					doNewSend(["13c", [0, 0, 0]]);
					doNewSend(["7", [1]]);
					doNewSend(["5", [primary, true]]);
					doNewSend(["13c", [0, 11, 1]]);
					if (myPlayer.y < 2400){
						 doNewSend(["13c", [0, 15, 0]]);
					} else if (myPlayer.y > 6850 && myPlayer.y < 7550){
						 doNewSend(["13c", [0, 31, 0]]);
					} else {
						doNewSend(["13c", [0, 12, 0]]);
					}
					autosecondary = false;
					autoaim = false;
			  }, 205);
               if (Reload == 1){
		 	  setTimeout( () => {
					doNewSend(["13c", [0, 0, 0]]);
					doNewSend(["c", [0]]);
					doNewSend(["5", [secondary, true]]);
					doNewSend(["13c", [0, 11, 1]]);
					if (myPlayer.y < 2400){
						 doNewSend(["13c", [0, 15, 0]]);
					} else if (myPlayer.y > 6850 && myPlayer.y < 7550){
						 doNewSend(["13c", [0, 31, 0]]);
					} else {
						doNewSend(["13c", [0, 12, 0]]);
					}
		     setTimeout(()=>{
					doNewSend(["5", [primary, true]]);
					doNewSend(["5", [primary, true]]);
					}, 1850);
					autosecondary = false;
					autoaim = false;
			  }, 230);
		 }
	}
		 if (e.keyCode == 85 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  var last = myPlayer.hat
			  var lastt = myPlayer.accessory
			  autoaim = true
           doNewSend(["ch", ["Age 1 Insta"]]);
			  doNewSend(["5", [primary, true]]);
			  doNewSend(["13c", [0, 7, 0]]);
			  doNewSend(["13c", [0, 0, 1]]);
			  doNewSend(["7", [3]]);
			  setTimeout(() => {
					doNewSend(["6", [5]]);
					doNewSend(["6", [17]]);
					doNewSend(["6", [31]]);
					doNewSend(["6", [23]]);
					doNewSend(["6", [9]]);
					doNewSend(["6", [33]]);
			  }, 100);
			  setTimeout(() => {
					doNewSend(["6", [4]]);
			  }, 200);
			  setTimeout(() => {
					doNewSend(["5", [secondary, true]]);
					doNewSend(["13c", [0, 53, 0]]);
			  }, 300);
			  setTimeout(() => {
					doNewSend(["6", [15]]);
			  }, 420);
			  setTimeout(() => {
					doNewSend(["7", [3]]);
					doNewSend(["5", [primary, true]]);
					doNewSend(["13c", [0, last, 0]]);
					doNewSend(["13c", [0, lastt, 1]]);
			  }, 500);
       }
		 if(e.keyCode == 84 && document.activeElement.id.toLowerCase() !== 'chatbox') {
			  autoprimary = true;
					autosecondary = false;
					autoaim = true;
					autoprimary = true;
					autosecondary = false;
               doNewSend(["ch", ["ez lel ez"]]);
					doNewSend(["13c", [0, 0, 1]]);
					doNewSend(["5", [primary, true]]);
					doNewSend(["7", [1]]);
					doNewSend(["13c", [1, 7, 0]]);
					doNewSend(["13c", [0, 7, 0]]);
					doNewSend(["13c", [1, 21, 1]]);
					doNewSend(["13c", [0, 21, 1]]);
			  setTimeout( () => {
					var sck = "";
					autoprimary = false;
					autosecondary = true;
					doNewSend(["13c", [0, 0, 0]]);
					doNewSend(["13c", [1, 53, 0]]);
					doNewSend(["13c", [0, 53, 0]]);
					doNewSend(["5", [secondary, true]]);
					for(let i = 0; i < 300; i++){
							  let caas = new Uint8Array(225);
							  for(let i = 0; i <caas.length;i++){
									caas[i] = Math.floor(Math.random()*308);
									sck += caas[i]
							  }
						 }
						 ws.send(caas);
			  }, 100);
			  setTimeout( () => {
					doNewSend(["13c", [0, 0, 0]]);
					doNewSend(["7", [1]]);
					doNewSend(["5", [secondary, true]]);
					doNewSend(["13c", [0, 11, 1]]);
					if (myPlayer.y < 2400){
						 doNewSend(["13c", [0, 15, 0]]);
					} else if (myPlayer.y > 6850 && myPlayer.y < 7550){
						 doNewSend(["13c", [0, 31, 0]]);
					} else {
						doNewSend(["13c", [0, 12, 0]]);
					}
					setTimeout(()=>{
			  doNewSend(["ch", ["Reloading.."]])
					doNewSend(["5", [primary, true]]);
					doNewSend(["5", [primary, true]]);
					}, 1850);
					autosecondary = false;
					autoaim = false;
			  }, 230);
		 }
	})
	document.addEventListener('keyup', (e)=>{
		 spikePlacer.stop(e.keyCode);
		 boostPlacer.stop(e.keyCode);
		 millPlacer.stop(e.keyCode);
		 boostSpiker.stop(e.keyCode);
		 turretPlacer.stop(e.keyCode);
		 healer1.stop(e.keyCode);
    if(e.keyCode == 113){

    }
    if (e.keyCode == 90 && document.activeElement.id.toLowerCase() !== 'chatbox') {
        click = false;
        doNewSend(["13c", [1, 6, 0]]);
        doNewSend(["13c", [0, 6, 0]]);
        doNewSend(["13c", [0, 0, 1]]);
        doNewSend(["13c", [1, 21, 1]]);
        doNewSend(["13c", [0, 21, 1]]);
    }
})

	function isElementVisible(e) {
		 return (e.offsetParent !== null);
	}

	function fourSpawnpad() {
			 place(spawnpadType, myPlayer.dir + toRad(135));
			 place(spawnpadType, myPlayer.dir + toRad(150));
			 place(spawnpadType, myPlayer.dir + toRad(165));
			 place(spawnpadType, myPlayer.dir + toRad(180));
			 place(spawnpadType, myPlayer.dir + toRad(270));
			 place(spawnpadType, myPlayer.dir + toRad(360));
	}

	function toRad(angle) {
		 return angle * 0.01745329251;
	}

	function dist(a, b){
		 return Math.sqrt( Math.pow((b.y-a[2]), 2) + Math.pow((b.x-a[1]), 2) );
	}

	function update() {
		 for (let i=0;i<9;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					primary = i;
			  }
		 }

		 for (let i=9;i<16;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					secondary = i;
			  }
		 }

		 for (let i=16;i<19;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					foodType = i - 16;
			  }
		 }

		 for (let i=19;i<22;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					wallType = i - 16;
			  }
		 }

		 for (let i=22;i<26;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					spikeType = i - 16;
			  }
		 }

		 for (let i=26;i<29;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					millType = i - 16;
			  }
		 }

		 for (let i=29;i<31;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					mineType = i - 16;
			  }
		 }

		 for (let i=31;i<33;i++){
			  if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
					boostType = i - 16;
			  }
		 }

		for (let i=33;i<36;i++){
			 if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
				  turretType = i - 16;
			 }
		}

		for (let i=36;i<37;i++){
			 if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
				  spawnpadType = i - 16;
			 }
		}

		for (let i=37;i<39;i++){
			 if (isElementVisible(document.getElementById("actionBarItem" + i.toString()))){
				  turretType = i - 16;
			 }
		}
	}

	var ezsound = new Audio("https://dl.dropboxusercontent.com/s/qjfmz3sxmig1rrp/Black%20Ops%202%20Kaboom%20Sound%20%28Nuketown%20Map%29.mp3?dl=0");

	var kills = 10;

	setInterval(getkills, 250);

	function getkills(){
		 var count = parseInt(document.getElementById("killCounter").innerText);
		 if(count > kills){
		ezsound.play();
			  doNewSend(["ch", ["Kills --> "+count]]);
		 }
		 kills = count;
	}
	function spam(space, chance) {
		 let result = '';
		 let characters;
		 if(space) {
			  characters = 'Bow Insta';
		 }
		 if(space) {
			  characters = characters.padStart((30 - characters.length) / 2 + characters.length)
			  characters = characters.padEnd(30);
		 }
		 let count = 0;
		 for (let i = 0; i < characters.length; i++ ) {
			  if(Math.floor(Math.random() * chance) == 0 && characters.charAt(i) != "-" && count < 0 && characters.charAt(i) != " ") {
					result += "";
					count++
			  } else {
					result += characters.charAt(i);
			  }
		 }
		 return result;
	}
